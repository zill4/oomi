services:
  frontend:
    build: 
      context: .
      dockerfile: Dockerfile.dev
    volumes:
      - .:/app
      - /app/node_modules
      - /app/packages/frontend/node_modules
      - /app/packages/frontend/.turbo
      - /app/packages/frontend/dist
    ports:
      - "5173:5173"
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    command: sh -c "cd packages/frontend && npm run dev -- --host"
    depends_on:
      - backend

  backend:
    build:
      context: .
      dockerfile: Dockerfile.dev
    volumes:
      - .:/app
      - /app/node_modules
      - /app/packages/backend/node_modules
      - /app/packages/backend/.turbo
      - /app/packages/backend/dist
    ports:
      - "8080:8080"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/oomi
      - JWT_SECRET=${JWT_SECRET}
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - NODE_ENV=development
    command: >
      sh -c "cd packages/backend &&
             npx prisma generate &&
             echo 'Checking database status...' &&
             npx prisma migrate deploy &&
             npm run dev"
    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres:15
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: oomi
    volumes:
      - postgres_data:/var/lib/postgresql/data
    user: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  prisma-studio:
    build: 
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - "5555:5555"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/oomi
    command: sh -c "cd packages/backend && npx prisma studio --hostname 0.0.0.0 --port 5555 --browser none"
    depends_on:
      - db

  resume-parser:
    build:
      context: .
      dockerfile: packages/resume-parser/Dockerfile.dev
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/oomi
      - APP_ENVIRONMENT=development
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - S3_BUCKET=${BUCKET_NAME}
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
    volumes:
      - ./packages/resume-parser:/app
    ports:
      - "3001:3001"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"   # AMQP protocol port
      - "15672:15672" # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres_data:
  resume_parser_target: