name: Deploy to AWS

env:
  AWS_REGION: us-west-2
  ECS_CLUSTER: oomi-cluster
  ECS_SERVICE: oomi-service
  TASK_DEFINITION: oomi-task

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push images
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build and push frontend
        docker build -t $ECR_REGISTRY/oomi-frontend:$IMAGE_TAG -f packages/frontend/Dockerfile ./packages/frontend
        docker push $ECR_REGISTRY/oomi-frontend:$IMAGE_TAG
        
        # Build and push backend
        docker build -t $ECR_REGISTRY/oomi-backend:$IMAGE_TAG -f packages/backend/Dockerfile ./packages/backend
        docker push $ECR_REGISTRY/oomi-backend:$IMAGE_TAG

    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition ${{ env.TASK_DEFINITION }} \
        --query taskDefinition > task-definition.json

    - name: Update task definition
      id: task-def
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Update image in task definition
        sed -i "s|$ECR_REGISTRY/oomi-frontend:[^\"]*|$ECR_REGISTRY/oomi-frontend:$IMAGE_TAG|g" task-definition.json
        sed -i "s|$ECR_REGISTRY/oomi-backend:[^\"]*|$ECR_REGISTRY/oomi-backend:$IMAGE_TAG|g" task-definition.json
        
        # Register new task definition
        aws ecs register-task-definition --cli-input-json file://task-definition.json

    - name: Update ECS service
      run: |
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE }} \
          --task-definition ${{ env.TASK_DEFINITION }} \
          --force-new-deployment
