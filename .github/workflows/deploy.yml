name: Deploy to AWS

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY_FRONTEND: oomi-frontend
  ECR_REPOSITORY_BACKEND: oomi-backend
  ECS_CLUSTER: oomi-cluster
  ECS_TASK_DEFINITION: infra/aws/ecs-task-definition.json

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Get AWS Account ID
      id: get-aws-account
      run: |
        AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
        echo "AWS_ACCOUNT_ID=${AWS_ACCOUNT_ID}" >> $GITHUB_ENV
        echo "Got AWS Account ID: ${AWS_ACCOUNT_ID}"

    - name: Create ECS Cluster
      run: |
        echo "Creating/ensuring cluster exists..."
        aws ecs create-cluster --cluster-name ${{ env.ECS_CLUSTER }} || true

    - name: Create ECS Task Definition
      run: |
        echo "Creating task definition..."
        # Replace AWS_ACCOUNT_ID in the task definition
        sed -i "s/\${AWS_ACCOUNT_ID}/${{ env.AWS_ACCOUNT_ID }}/g" ${{ env.ECS_TASK_DEFINITION }}
        
        TASK_DEF_ARN=$(aws ecs register-task-definition \
          --cli-input-json file://${{ env.ECS_TASK_DEFINITION }} \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)
        echo "TASK_DEF_ARN=${TASK_DEF_ARN}" >> $GITHUB_ENV
        echo "Created task definition: ${TASK_DEF_ARN}"

    - name: Create IAM Role
      run: |
        echo "Creating ECS Task Execution Role..."
        aws iam create-role \
          --role-name ecsTaskExecutionRole \
          --assume-role-policy-document '{
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": "ecs-tasks.amazonaws.com"
                },
                "Action": "sts:AssumeRole"
              }
            ]
          }' || true
        
        aws iam attach-role-policy \
          --role-name ecsTaskExecutionRole \
          --policy-arn arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy || true

    - name: Create Log Groups
      run: |
        echo "Creating CloudWatch log groups..."
        aws logs create-log-group --log-group-name /ecs/oomi-frontend || true
        aws logs create-log-group --log-group-name /ecs/oomi-backend || true

    - name: Create ECS Services
      run: |
        echo "Creating frontend service..."
        aws ecs create-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service-name oomi-frontend \
          --task-definition ${{ env.TASK_DEF_ARN }} \
          --desired-count 1 \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.VPC_SUBNETS }}],securityGroups=[${{ secrets.SECURITY_GROUP }}],assignPublicIp=ENABLED}" || true
        
        echo "Creating backend service..."
        aws ecs create-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service-name oomi-backend \
          --task-definition ${{ env.TASK_DEF_ARN }} \
          --desired-count 1 \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.VPC_SUBNETS }}],securityGroups=[${{ secrets.SECURITY_GROUP }}],assignPublicIp=ENABLED}" || true

    - name: Update Services
      if: success()
      run: |
        echo "Updating services..."
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service oomi-frontend \
          --task-definition ${{ env.TASK_DEF_ARN }} \
          --force-new-deployment || echo "Frontend service update failed"
        
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service oomi-backend \
          --task-definition ${{ env.TASK_DEF_ARN }} \
          --force-new-deployment || echo "Backend service update failed" 