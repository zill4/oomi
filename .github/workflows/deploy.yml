name: Deploy to AWS

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY_FRONTEND: oomi-frontend
  ECR_REPOSITORY_BACKEND: oomi-backend
  ECS_CLUSTER: oomi-cluster
  ECS_TASK_DEFINITION: infra/aws/ecs-task-definition.json
  VPC_SUBNETS: ${{ env.VPC_SUBNETS }}
  SECURITY_GROUP: ${{ env.SECURITY_GROUP }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
          
    - name: Create or update ECS services
      run: |
        # Check if cluster exists, create if it doesn't
        aws ecs describe-clusters --clusters ${{ env.ECS_CLUSTER }} || \
        aws ecs create-cluster --cluster-name ${{ env.ECS_CLUSTER }}
        
        # Register task definition
        TASK_DEF_ARN=$(aws ecs register-task-definition \
          --cli-input-json file://${{ env.ECS_TASK_DEFINITION }} \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)
        
        # Create or update frontend service
        aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services oomi-frontend || \
        aws ecs create-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service-name oomi-frontend \
          --task-definition $TASK_DEF_ARN \
          --desired-count 1 \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[${{ env.VPC_SUBNETS }}],securityGroups=[${{ env.SECURITY_GROUP }}]}"
        
        # Create or update backend service
        aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services oomi-backend || \
        aws ecs create-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service-name oomi-backend \
          --task-definition $TASK_DEF_ARN \
          --desired-count 1 \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[${{ env.VPC_SUBNETS }}],securityGroups=[${{ env.SECURITY_GROUP }}]}" 