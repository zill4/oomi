name: Deploy to AWS

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY_FRONTEND: oomi-frontend
  ECR_REPOSITORY_BACKEND: oomi-backend
  ECS_CLUSTER: oomi-cluster
  ECS_TASK_DEFINITION: infra/aws/ecs-task-definition.json

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
          
    - name: Create ECS Cluster
      run: |
        aws ecs create-cluster --cluster-name ${{ env.ECS_CLUSTER }} || true
        echo "Created/verified cluster ${{ env.ECS_CLUSTER }}"

    - name: Create Task Definition
      run: |
        if [ ! -f ${{ env.ECS_TASK_DEFINITION }} ]; then
          echo "Task definition file not found at ${{ env.ECS_TASK_DEFINITION }}"
          exit 1
        fi
        
        TASK_DEF_ARN=$(aws ecs register-task-definition \
          --cli-input-json file://${{ env.ECS_TASK_DEFINITION }} \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)
        echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV
        echo "Registered task definition: $TASK_DEF_ARN"

    - name: Create ECS Services
      run: |
        # Check if frontend service exists
        if ! aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services oomi-frontend | grep -q "ACTIVE"; then
          echo "Creating frontend service..."
          aws ecs create-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service-name oomi-frontend \
            --task-definition ${{ env.TASK_DEF_ARN }} \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.VPC_SUBNETS }}],securityGroups=[${{ secrets.SECURITY_GROUP }}],assignPublicIp=ENABLED}"
        fi
        
        # Check if backend service exists
        if ! aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services oomi-backend | grep -q "ACTIVE"; then
          echo "Creating backend service..."
          aws ecs create-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service-name oomi-backend \
            --task-definition ${{ env.TASK_DEF_ARN }} \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.VPC_SUBNETS }}],securityGroups=[${{ secrets.SECURITY_GROUP }}],assignPublicIp=ENABLED}"
        fi

    - name: Update ECS Services
      if: success()
      run: |
        # Only try to update if services exist
        if aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services oomi-frontend | grep -q "ACTIVE"; then
          echo "Updating frontend service..."
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service oomi-frontend \
            --task-definition ${{ env.TASK_DEF_ARN }} \
            --force-new-deployment
        fi
        
        if aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services oomi-backend | grep -q "ACTIVE"; then
          echo "Updating backend service..."
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service oomi-backend \
            --task-definition ${{ env.TASK_DEF_ARN }} \
            --force-new-deployment
        fi 