# Build stage
FROM rust:1.83-slim-bullseye AS builder
WORKDIR /app

# Install build dependencies and cargo-sqlx
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && cargo install sqlx-cli --no-default-features --features native-tls,postgres \
    && cargo install cargo-watch

# Copy manifests
COPY packages/resume-parser/Cargo.toml ./Cargo.toml

# Create dummy source and build dependencies
RUN mkdir -p src && \
    echo 'fn main() { println!("Initializing resume-parser..."); }' > src/main.rs

# Copy migrations and prepare offline mode
COPY packages/resume-parser/migrations ./migrations
ENV DATABASE_URL=postgresql://postgres:postgres@db:5432/oomi
RUN mkdir .sqlx

# Copy source and build
COPY packages/resume-parser/src ./src
COPY packages/resume-parser/config ./config

# For development, we'll use the same image for runtime
# This keeps cargo and all development tools available
FROM rust:1.83-slim-bullseye
WORKDIR /app

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && cargo install cargo-watch

# Copy everything from builder
COPY --from=builder /app .
COPY --from=builder /usr/local/cargo/bin/sqlx /usr/local/cargo/bin/
COPY --from=builder /usr/local/cargo/bin/cargo-watch /usr/local/cargo/bin/

# Copy source code
COPY packages/resume-parser/src ./src
COPY packages/resume-parser/migrations ./migrations
COPY packages/resume-parser/config ./config
COPY packages/resume-parser/start.sh /usr/local/bin/start.sh

# Make start script executable
RUN chmod +x /usr/local/bin/start.sh

# Run the start script
CMD ["/usr/local/bin/start.sh"] 