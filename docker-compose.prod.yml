version: '3.8'
services:
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.prod
      target: frontend
    ports:
      - "3000:80"
    networks:
      - app-network
    depends_on:
      - backend

  backend:
    build:
      context: .
      dockerfile: Dockerfile.prod
      target: backend
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/oomi
      - MONGODB_URI=mongodb://${MONGO_USER}:${MONGO_PASSWORD}@mongodb:27017/oomi?authSource=admin
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
      - JWT_SECRET=${JWT_SECRET}
      - BUCKET_NAME=${BUCKET_NAME}
      - AWS_REGION=${AWS_REGION}
      - AWS_ENDPOINT_URL_S3=${AWS_ENDPOINT_URL_S3}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - PORT=8080
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - API_URL=http://backend:8080
      - CORS_ORIGIN=http://localhost:3000  # Frontend URL
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - SESSION_SECRET=${SESSION_SECRET}
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        /app/wait-for-it.sh db:5432 &&
        npx prisma generate &&
        npx prisma db push --skip-generate --accept-data-loss &&
        node dist/index.js
      "
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  resume-parser:
    build:
      context: ./packages/resume-parser
      dockerfile: Dockerfile
    environment:
      - BUCKET_NAME=${BUCKET_NAME}
      - AWS_REGION=${AWS_REGION}
      - AWS_ENDPOINT_URL_S3=${AWS_ENDPOINT_URL_S3}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
      - API_URL=http://backend:8080
    networks:
      - app-network
    depends_on:
      rabbitmq:
        condition: service_healthy

  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=oomi
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d oomi"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - app-network

  mongodb:
    image: mongo:latest
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD:-admin}
      - MONGO_INITDB_DATABASE=oomi
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongodb/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
    ports:
      - "27017:27017"
    networks:
      - app-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  rabbitmq:
    image: rabbitmq:3-alpine
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 20s
      timeout: 10s
      retries: 5

  prisma-studio:
    build:
      context: .
      dockerfile: Dockerfile.prod
      target: backend
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        sleep 5 &&
        cd /app &&
        npx prisma generate &&
        npx prisma studio --hostname 0.0.0.0 --port 5555 --browser none
      "
    ports:
      - "5555:5555"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/oomi
    volumes:
      - ./packages/backend/prisma:/app/prisma
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy

volumes:
  postgres_data:
  mongodb_data:
  rabbitmq_data:
  postgres_logs:

networks:
  app-network:
    driver: bridge